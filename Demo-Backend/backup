
  doLogin:(req,res) => {
    let users = req.body;
    console.log(users)
    // getUserByFields(users.Userid,users.email,users.password,users.role).then((user) => {
    query = "select Userid,email,password,role from users where Userid = ?";
    connection.query(query, [users.Userid], (err, results) => {
      if (!err) {
        if (results.length <= 0 || results[0].password != users.password) {
          return res.status(401).json({Message:"incorrect email or password"});
        } else if (results[0].password == users.password) {
          const response = { Userid: results[0].Userid, role: results[0].role };
          const accesstoken = jwt.sign(response, process.env.ACCCESS_TOKEN, {
            expiresIn: "8h",
          });
          res.status(200).json({ token: accesstoken });
        } else {
          return res.status(400).json({ message: "something went wrong" });
        }
      } else {
        return res.status(500).json(err);
      }
    });
  }






 // forgot password backup

 var transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: {
      user: process.env.EMAIL,
      pass: process.env.PASSWORD,
    },
  });
  
  router.post("/forgotpassword", function (req, res) {
    // userService.forgotPassword(req,res)
    let user = req.body;
    query = "select email,password from users where email=?";
    connection.query(query, [user.email], (err, results) => {
      if (!err) {
        if (results.length <= 0) {
          res.status(404).json({ Message: "No USER EXISTS WITH THIS EMAIL ID" });
        } else {
          var mailOptions = {
            from: process.env.EMAIL,
            to: results[0].email,
            subject: "Forgot Password",
            html:
              "<p><b>Password Reset</b><br><b>Email: </b>" +
              results[0].email +
              "<br> <b>Password: </b>" +
              results[0].password +
              "<br>http://localhost:4200/ click the link to login</a></p>",
          };
          transporter.sendMail(mailOptions, (err, info) => {
            if (err) {
              console.log(err);
            } else {
              console.log(info);
            }
          });
        }
      } else {
        return res.status(500).json(err);
      }
    });
  });

  //getuser

  router.get("/getusers",auth.Authentication, (req, res) =>
 {
  var query = "select Userid,firstname,lastname,email,contactnumber from users where role='user'";
  connection.query(query,(err,results)=>
  {
    if(results)
    {
      return res.status(500).json(results)
    
    }
    else
    {
      return res.status(200).json(err)
    }
  })

  // userService.GetUserDetails(req,res)
})


//authentication.js

require('dotenv').config()
const { response } = require('express')
const jwt= require('jsonwebtoken')

function Authentication(req,res,next) {
    const authHeader = req.headers['authorization']
    const token = authHeader && authHeader.split('')[1]
    if(token==null)
        return res.sendStatus(401)
    else 
     jwt.verify(token,process.env.ACCCESS_TOKEN,(err,response)=>
    {
        if(err) 
            return res.sendStatus(403)
        else
        res.locals=response
        next()
    })
    
}

module.exports = {Authentication:Authentication}

//dologin-21-12-22

doLogin: (req, res) => {
  let user = req.body;
  userTasks
    .getUserByUserid(user.Userid)
    .then((users) => {
      // console.log(users);
      if (users.length <= 0 || users[0].password != user.password) {
        return res
          .status(401)
          .json({ Message: "Incorrect Username or password" });
      } else if (users[0].password == user.password) {
        const response = { userid: users[0].Userid, role: users[0].role };
        const accesstoken = jwt.sign(response, process.env.ACCCESS_TOKEN, {
          expiresIn: "8h",
        });
          // res.status(200).json({token: accesstoken});
          res.status(200).json({role:response.role});
          // res.json(users[0].role)
          console.log(users[0].role)
      } else {
        return res.status(400).json({ message: "something went wrong" });
      }
    })
    .catch((error) => {
      return res.status(500).json("Internal server error:" + error);
    });
}


//dologin with match

doLogin: (req, res) => {
  let user = req.body;
  userTasks
    .getUserByUserid(user.Userid)
    .then((users) => {
      console.log(users);
      if (users.length <= 0) 
      {
        return res
          .status(401)
          .json({ Message: "Incorrect Username"});
       
      } 
      else
      {
          bcrypt.compare(users[0].password,user.password).then(match=>
          {
            console.log(users[0].password)
            console.log(user.password)
            console.log(match);
                if(match)
                  {
                  console.log("Logged in successfully")
                  const response = { userid: users[0].Userid, role: users[0].role };
                  const accesstoken = jwt.sign(response, process.env.ACCCESS_TOKEN, {
                    expiresIn: "8h",
                  });
                  res.status(200).json({token: accesstoken});
                  // res.status(200).json({role:response.role});
                  // res.json(users[0].role)
                  // console.log(users[0].role)
                }
                else
                {
                  console.log("Incorrect password")
                  res.json({ Message: 'Incorrect password!!' })

                }
        }) .catch((error) => 
            {
              return res.status(500).json("Internal server error:" + error);
          })
                                 
  
  .catch((error) => 
    {
      return res.status(500).json("Internal server error:" + error);
    });
  
}
})
}



//EDIT PROFILE

 //   UpdateUser:(Userid,
  //     firstname,
  //     lastname,
  //     email,
  //     contactnumber
  // ) => {
  //     var query="update users set firstname=?,lastname=?,email=?,contactnumber=? where Userid=?"
  //     const param = [
  //       Userid,
  //       firstname,
  //       lastname,
  //       email,
  //       contactnumber

  //     ];

  //     return new Promise((resolve, reject) => {
  //       connection.query(query, param, function (error, results) {
  //         if (error) reject(error);
  //         console.log(error);
  //         resolve(true);

  //       });
  //     });
  //   },



  //login


  // else if(Password.decrypt(Password.encrypt(users[0].password)) != user.password)
  // {
  //   // console.log("rq",user.password)
  //   // console.log("b",Password.decrypt(Password.encrypt(users[0].password)))
  //   // console.log("b",Password.encrypt(users[0].password))
  //   // console.log(await bcrypt.compare(password, hashedPassword))
  //   res.send({ message: "Invalid password", status: false });
  // }
  // else if (users[0].password == user.password) {
  //   console.log(users)
  //   const response = { username: users[0].username, role:users[0].role ,Id:users[0].id};
  //   const accesstoken = jwt.sign(response, process.env.ACCCESS_TOKEN, {
  //     expiresIn: "8h",
  //   });
  //   userTasks.getUserByUserid(response.username).then((users) => {
  //     // console.log(users);
  //     res
  //       .status(200)
  //       .json({
  //         token: accesstoken,
  //         Detail: users[0].role,
  //         status: true,
  //         Id:users[0].id
  //       });
  //       console.log("id" ,users[0].id)
  //   });
  //   // res.status(200).json({token: accesstoken});
  //   // res.status(200).json({Message:response.role})
  //   // console.log(users[0].role)
  // } 





  // password.service //


  const nodemailer = require("nodemailer");
const connection = require("../db/connection");
const Password= require('../services/password')




var transporter = nodemailer.createTransport({
  service: "Gmail",
  auth: {
    user: process.env.EMAIL,
    pass: process.env.PASSWORD,
  },
});

const PasswordService = {
  ForgotPassword: (req, res) => {
    let user = req.body;
    const query = "select first_name,email,(select cast(aes_decrypt(password, 'PASS') AS char) from user where email=? ) as password1 from user where email=?";
    const param = [
     user.email,
     user.email
    ];
    console.log("param",param)
    connection.query(query,param, (err, results) => {
      console.log("results",results)
      console.log("results[0].password1",results[0].password1)
      if (!err) {
        if (results.length <= 0) {
          res
            .status(404)
            .json({Message: "No USER EXISTS WITH THIS EMAIL ID"});
        } else {
          var mailOptions = {
            from: process.env.EMAIL,
            to: results[0].email,
            subject: "Forgot Password",
            html:
              "<p>Hi "+results[0].first_name+"<br>Forgot your Password ?<br><b>Email: </b>" +
              results[0].email +
              "<br> <b>Your Password: </b>" +
              results[0].password1+ 
              "<br>click the link  and  login with the above password  http://localhost:4200/ </a></p>",
          };
          transporter.sendMail(mailOptions, (err, info) => {
            if (err) {
              console.log(err);
            } else {
              console.log(info);
            }
          });
        }
      } else {
        return res.status(500).json(err);
      }
    });
  },

  LoginDetails: (req, res) => {
    let user = req.body;
    query = "select first_name,username,email,(select cast(aes_decrypt(password, 'PASS') AS char) from user where email=? ) as password  from user where email=?";
    connection.query(query, [user.email], (err, results) => {
      if (!err) 
      {
        if (results.length <= 0) 
        {
          res
            .status(404)
            .json({Message: "No USER EXISTS WITH THIS EMAIL ID"});
        } 
        else 
        {
            var mailOptions = {
            from: process.env.EMAIL,
            to: results[0].email,
            subject: "Login Details",
            html:
              "<p>Hi "+results[0].first_name+"<br>"+
              "Here your login details<br><b>Username: </b>" +
              results[0].username +
              "<br> <b>Password: </b>" +
              results[0].password+ 
              // Password.decrypt(Password.encrypt(results[0].password)) +
              "<br>click the link  and  login with the above username and password  http://localhost:4200/ </a></p>",
          };
          transporter.sendMail(mailOptions, (err, info) => {
            if (err) {
              console.log(err);
            } else {
              console.log(info);
            }
          });
        }
      } else {
        return res.status(500).json(err);
      }
    });
  },


};
module.exports = PasswordService;

//backup

const md5 = require("md5");
const connection = require("../db/connection");
const userTasks = require("../task/user.task");
const jwt = require("jsonwebtoken");
require("dotenv").config();
var auth = require("../services/Authentication");
var checkrole = require("../services/checkRole");
var bcrypt = require('bcrypt')
const PasswordService = require("../services/PasswordService");
const Password=require('../services/password')

const userService = {
  doCreate: (req, res) =>
   {
    let users = req.body;
    userTasks
      .getUserByEmailId(users.email)
      .then((user) => {
        if (user.length > 0) {
          // return res.status(200).json("User already exists");
          res.send({message:"User already exists"})
        } else {
          userTasks.insertUser(users).then((results) => {
            if (results) {
              // return res.status(200).json("User successfully added");
              PasswordService.LoginDetails(req,res)
              res.send({message:"User successfully added"})
            }
          });
        }
      })
      .catch((error) => {
        // return res.status(500).json("Internal server error:" + error);
        res.send({ message: "Internal server error:" + error });
      });
  },

  CheckEmail: (req, res) => {
    let users = req.body;
    // console.log(users);
    userTasks
      .getUserByEmailId(users.email)
      .then((user) => {
        if (user.length > 0) {
          // return res.status(200).json("User already exists");
          res.send({ message: "Email id already exists", status: true });
        } else {
          res.send({ message: "Email id does not exist", status: false });
        }
      })
      .catch((error) => {
        // return res.status(500).json("Internal server error:" + error);
        res.send({ message: "Internal server error:" + error });
      });
  },

  CheckId: (req, res) => {
    let users = req.body;
    // console.log(users);
    userTasks
      .getUserByUserid(users.Userid)
      .then((user) => {
        if (user.length > 0) {
          // return res.status(200).json("User already exists");
          res.send({ message: "User name already exists", status: true });
        } else {
          res.send({ message: "User name does not exist", status: false });
        }
      })
      .catch((error) => {
        // return res.status(500).json("Internal server error:" + error);
        res.send({ message: "Internal server error:" + error });
      });
  },

  CheckEmail: (req, res) => {
    let users = req.body;
    // console.log(users);
    userTasks
      .getUserByEmailId(users.email)
      .then((user) => {
        if (user.length > 0) {
          // return res.status(200).json("User already exists");
          res.send({message:"Email id already exists",status:true})
        } else {
        res.send({message:"Email id does not exist",status:false})
        }
      })
      .catch((error) => {
        // return res.status(500).json("Internal server error:" + error);
        res.send({message:"Internal server error:" + error})
      });
  },

  CheckId: (req, res) => {
    let users = req.body;
    // console.log(users);
    userTasks
      .getUserByUserid(users.username)
      .then((user) => {
        if (user.length > 0) {
          // return res.status(200).json("User already exists");
          res.send({message:"User name already exists",status:true})
        } else {
        res.send({message:"User name does not exist",status:false})
        }
      })
      .catch((error) => {
        // return res.status(500).json("Internal server error:" + error);
        res.send({message:"Internal server error:" + error})
      });
  },



  doLogin: (req, res) => {
    let user = req.body;
    userTasks.GetDecryptPassword(user.username).then(async(pass)=>{
    })
    userTasks
      .getUserByUserid(user.username)
      .then(async(users) => {
        // console.log("req",user.password)
        // console.log("db",users[0].password)
        // console.log("decrypteddb",Password.decrypt(Password.encrypt(users[0].password)))
        if (users.length <= 0 ) {
          res.send({ message: "Invalid username", status: false });
        } 
         
        else if(pass.password1!= user.password)
        {
          console.log("rq",user.password)
          console.log("b",pass.password1)
          // console.log("b",Password.encrypt(users[0].password))
          // console.log(await bcrypt.compare(password, hashedPassword))
          res.send({ message: "Invalid password", status: false });
        }
        else if (pass.password1== user.password) {
          console.log(users)
          const response = { username: users[0].username, role:users[0].role ,Id:users[0].id};
          const accesstoken = jwt.sign(response, process.env.ACCCESS_TOKEN, {
            expiresIn: "8h",
          });
          userTasks.getUserByUserid(response.username).then((users) => {
            // console.log(users);
            res
              .status(200)
              .json({
                token: accesstoken,
                Detail: users[0].role,
                status: true,
                Id:users[0].id
              });
              console.log("id" ,users[0].id)
          });
          // res.status(200).json({token: accesstoken});
          // res.status(200).json({Message:response.role})
          // console.log(users[0].role)
        } else {
          res.send({ message: "something went wrong" });
          // return res.status(400).json({ Message: "something went wrong" });
        }
      })
      .catch((error) => {
        // return res.status(500).json("Internal server error:" + error);
        res.send({ message: "Internal server error:" + error });
      });
  },

  GetUserById: (req, res) => {
    var query =
      "select username,first_name,last_name,email,contact_number from user where id=?";
      console.log(req.params.id)
      const id=req.params.id;
    connection.query(query,id, (err, results) => {
      if (results) {
        // return res.status(500).json({msg:results});
        res.send({ message: results });
      } else {
        res.send({ message: err });
      }
    });
  },

  EditUserProfile: (req,res)=>
  {
  // console.log(req.body)
  // console.log(req.params.id)
  const id=req.params.id;
   const newusername = req.body.username;
   const newfirst_name = req.body.first_name;
   const newlast_name = req.body.last_name;
   const newemail = req.body.email;
   const newcontact_number = req.body.contact_number;
  var X= userTasks.Editprofile(id,newusername,newfirst_name,newlast_name,newemail,newcontact_number)

  
    if(X)
    {
      return res.json({message:"Updated the profile"});
    }
    else{
      return res.json({message:"Updation Failed"});
    }

  },
  DeleteUserById:(req,res)=>
  {
    var query = "delete from user where id=?"
    connection.query(query, [req.params.id], (err, results) =>
    {
      if (results)
      {
        res.send({message:results})
      }
      else
      {
        res.send({ message: err });
      }
    })

  },

  GetRole: (req, res) => {
    var query = "select role from user";
    connection.query(query, (err, results) => {
      if (results) {
        // return res.status(500).json({msg:results});
        res.send({ message: results });
      } else {
        // return res.status(200).json(err);
        res.send(err);
      }
    });
  },

  GetAllDetails:(req,res) => 
  {
    var query = "select * from user where role='user'";
    connection.query(query, (err, results) => {
      if (results) {
        res.send({message:results})
      }
      else{
        res.send({message:err})

      }
    })
  },
  GetUsersForExcel:(req,res) => 
  {
    var query = `select username as USERNAME,first_name as FIRST_NAME, last_name as LAST_NAME, email as EMAIL, contact_number as PHONE from user where role='user';`
    connection.query(query, (err, results) => {
      if (results) {
        res.send({message:results})
      }
      else{
        res.send({message:err})

      }
    })
  },

  GetAllDetailsWithMapping: (req, res) => {
    var list = [];
    var count=0
    var query = "select * from user where role='user'";
    connection.query(query, (err, results) => {
      if (results) {
        // return res.status(500).json({msg:results});
        // res.send({ message: results });
        results.forEach((el) => {
          var query1= "select vessel_name from vessel_user_mapping where user_id=?"
          var id=element.id;
          connection.query(query1, id, (err2, results2) => {
            results2.forEach(e => {
            list.push(e["vessel_name"]);
           // console.log(e);
            })
           // console.log(list)
           el["vesselslist"]=list; 
           el['hellotest'] = 'testing ';
           console.log('main element ....' , el);
           el.test = 'test'
            // list=[];
           // console.log(list);
          });
          // console.log("results11111 ...",results);
          count++;
        });

console.log('main result here ... ' , results)
        
        if(results.length==count+1)
        {
          // console.log("results21",results);
        }
        // console.log("resultsfinal line ...",results);
        // res.send({ message: results });
       
        // results.forEach(element => {
        //   element["vesselslist"]=list
        // })
        // list=[];
        
      } else {
        // return res.status(200).json(err);
        res.send(err);
      }
    });
  },
 
};

module.exports = userService;
